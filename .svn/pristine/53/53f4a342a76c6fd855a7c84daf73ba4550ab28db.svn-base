#ifndef MODELSTRUCTURE_H
#define MODELSTRUCTURE_H

#include "markerpoint.h"

using namespace std;

class ModelStructure
{
    size_t Size, Epsilon;

    std::vector<MarkerPoint*> Roots;
    std::vector<MarkerPoint> PointsStructure;

    vector<vector<float> > distances;
public:
    ModelStructure();
    ModelStructure(QTreeWidget *item);
    void AddPoint(MarkerPoint point){PointsStructure.push_back(point); Size++;}
    void AddRoot(MarkerPoint *root){Roots.push_back(root);}
    void AddPoint(vector<MarkerPoint> points){PointsStructure.insert(PointsStructure.end(), points.begin(), points.end()); Size += points.size();}

    vector<size_t> getIDs(vector <vec3> Points);
    size_t getSize() const {return Size;}

    void Save(ExportFormat format, std::ofstream &outputFile);

private:
    void countDistances(vector <vec3> Points);
    bool verifyDistance(size_t PointIndex, MarkerPoint marker);

    void addChildren(QTreeWidgetItem *parentItem, MarkerPoint* parent);
};

#endif // MODELSTRUCTURE_H
