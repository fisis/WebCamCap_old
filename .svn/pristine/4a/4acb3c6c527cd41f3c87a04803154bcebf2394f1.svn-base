#ifndef OPENGLWINDOW_H
#define OPENGLWINDOW_H

#include <QCloseEvent>
#include <QGLWidget>

#include "line.h"

using namespace glm;

class OpenGLWindow : public QGLWidget
{
    Q_OBJECT

    //paint props
    bool DrawJoints, DrawLines, DrawBones;
    vec3 CamRot;
    float Zoom;

    //Room props
    vec3 RoomDims;
    QImage Texture;
    unsigned int TexId;

    //Structure
    std::vector<std::vector<Line> > Lines;
    std::vector<Line > Bones;
    std::vector<vec3> Joints;

    //mouse tracking
    bool LeftButton;
    vec2 LastMousePos, CurrentMousePos;

public:
    explicit OpenGLWindow(QWidget *parent = 0);

    void initializeGL();
    void paintGL();
    void resizeGL(int w, int h);

    void setRoomDims(vec3 dims);
    void setDrawJoints(bool draw){DrawJoints = draw;}
    void setDrawLines(bool draw){DrawLines = draw;}
    void setDrawBones(bool draw){DrawBones = draw;}
    void setFrame(std::vector<std::vector<Line> > lns = std::vector<std::vector<Line> >(), std::vector<vec3> pts = std::vector<vec3>(), std::vector<Line> bns = std::vector<Line>());
signals:

public slots:

private:   
    //mouse events
    void wheelEvent(QWheelEvent *event);
    void mousePressEvent(QMouseEvent * event);
    void mouseReleaseEvent(QMouseEvent *event);
    void mouseMoveEvent(QMouseEvent *event);

    void limitsCamRot();
    void countView();

    void drawLine(Line l);

    void drawLines();
    void drawJoints();
    void drawBones();
    void drawFloor();

    void DefaultView();

    void loadTexture();

};

#endif // OPENGLWINDOW_H
