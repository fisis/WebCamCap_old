#ifndef PARALLELHANDLE_H
#define PARALLELHANDLE_H

#include <opencv2/opencv.hpp>
#include <queue>

#include "openglwindow.h"
#include "capturecamera.h"

#include <QtCore>
#include <QTime>
#include <QApplication>


using namespace glm;

class worker : public QObject
{
  Q_OBJECT

    volatile bool running;

    CaptureCamera *cam;
    QMutex mutex;
    QWaitCondition *line;

    std::vector<Line> result;

public:
    explicit worker(QWaitCondition *q, CaptureCamera *cam,QObject *parent = 0);
    ~worker(){do_Work(); emit finished();}

signals:
    void finished();
    void ResultReady(std::vector<Line> lines);

public slots:
  void StopWork();
  void StartWork();

private slots:
  void do_Work();

private:

};

#endif // PARALLELHANDLE_H
