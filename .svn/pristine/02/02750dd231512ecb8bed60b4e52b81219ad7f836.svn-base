#ifndef PARALLELHANDLE_H
#define PARALLELHANDLE_H

#include <opencv2/opencv.hpp>
#include "capturecamera.h"
#include <QtCore>

#include <queue>


using namespace glm;

class CaptureThread : public QThread
{
    Q_OBJECT

    bool restart;
    bool abort;

    CaptureCamera *Cam;
    QMutex mutex;
    QWaitCondition condition;
    QWaitCondition * line;

    std::vector<Line> Result;
public:
    CaptureThread(QWaitCondition *q, CaptureCamera *cam, QThread *parent = NULL);
    ~CaptureThread();

signals:
  void ResultReady(std::vector<Line> lines);

private slots:

private:

  void run();
};


class ParallelIntersections : public QObject
{
    Q_OBJECT

    QWaitCondition allLines;
    std::vector <bool> haveResults;
    std::queue <std::vector<Line> > Results;
    std::vector <CaptureCamera*> cameras;

    std::vector <CaptureThread*> camThreads;
public:
    ParallelIntersections(std::vector <CaptureCamera*> cams);
    ~ParallelIntersections();

signals:
    //void nextFrame(const bool &n);

private slots:
    void ResultReady(std::vector<Line> lines);

private:

    void Intersections();
};

#endif // PARALLELHANDLE_H
